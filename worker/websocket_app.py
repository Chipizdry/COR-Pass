"""
FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ –≤ modbus_worker.
–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å Cerbo/Modbus —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ —á–µ—Ä–µ–∑ email/password –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.
"""
import asyncio
from contextlib import asynccontextmanager
from typing import Dict
from fastapi import FastAPI, WebSocket, WebSocketDisconnect, Depends, HTTPException, status
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from loguru import logger
from pydantic import BaseModel

from cor_pass.database.db import get_db
from cor_pass.database.models import User
from cor_pass.config.config import settings
from cor_pass.services.websocket_events_manager import websocket_events_manager
from cor_pass.database.redis_db import redis_client
from passlib.context import CryptContext


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
background_tasks = []

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
COMMAND_SEND_INTERVAL = 5  # –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–∞–Ω–¥—É –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥


# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è API
class WSMessageBase(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    session_token: str
    data: Dict


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("Starting Energetic Devices WebSocket Server...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ Redis –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    await websocket_events_manager.init_redis_listener()
    logger.info("Redis listener initialized for WebSocket events")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Modbus-–∫–æ–º–∞–Ω–¥
    modbus_task = asyncio.create_task(send_modbus_command_to_all_devices())
    background_tasks.append(modbus_task)
    logger.info(f"Background task started: Modbus command sender (interval: {COMMAND_SEND_INTERVAL}s)")
    
    yield
    
    # Shutdown
    logger.info("Shutting down Energetic Devices WebSocket Server...")
    
    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    for task in background_tasks:
        task.cancel()
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    await asyncio.gather(*background_tasks, return_exceptions=True)
    logger.info("All background tasks stopped")


app = FastAPI(
    title="Energetic Devices WebSocket Server", 
    description="WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (Cerbo/Modbus)",
    lifespan=lifespan
)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª–µ–π
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def verify_password(plain_password: str, hashed_password: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ plain-text –ø–∞—Ä–æ–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É.
    Standalone —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤.
    """
    return pwd_context.verify(plain_password, hashed_password)


async def get_user_by_email(email: str, db: AsyncSession):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    Standalone —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤.
    """
    result = await db.execute(select(User).where(User.email == email))
    return result.scalar_one_or_none()


async def send_modbus_command_to_all_devices():
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ Modbus-–∫–æ–º–∞–Ω–¥—ã –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º.
    –ö–æ–º–∞–Ω–¥–∞: 09 03 00 00 00 0a c4 85 (hex)
    """
    logger.info("üîÑ Starting background task: send_modbus_command_to_all_devices")
    
    while True:
        try:
            await asyncio.sleep(COMMAND_SEND_INTERVAL)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            connections = websocket_events_manager.active_connections
            
            if not connections:
                logger.debug("No active energetic devices connected")
                continue
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º hex-–∫–æ–º–∞–Ω–¥—É
            hex_command = "09 03 00 00 00 0a c4 85"
            command_data = {
                "command_type": "modbus_read",
                "hex_data": hex_command
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∫–∞–∂–¥–æ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
            for connection_id, conn_data in connections.items():
                session_id = conn_data.get("session_id")
                if not session_id:
                    continue
                
                try:
                    await websocket_events_manager.send_to_session(
                        session_id=session_id,
                        event_data=command_data
                    )
                    logger.debug(f"üì§ Sent Modbus command to device with session_id: {session_id}")
                except Exception as e:
                    logger.warning(f"Failed to send command to session {session_id}: {e}")
            
            logger.info(f"‚úÖ Modbus command broadcast complete. Sent to {len(connections)} devices")
            
        except asyncio.CancelledError:
            logger.info("Background task send_modbus_command_to_all_devices cancelled")
            break
        except Exception as e:
            logger.error(f"Error in send_modbus_command_to_all_devices: {e}", exc_info=True)
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            await asyncio.sleep(5)


@app.get("/health")
async def health_check():
    """Health check endpoint –¥–ª—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    energetic_count = len(websocket_events_manager.active_connections)
    
    return {
        "status": "healthy",
        "service": "energetic_devices_websocket_server",
        "connected_devices": energetic_count
    }


@app.get("/devices/connected")
async def get_connected_energetic_devices():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    # active_connections —ç—Ç–æ Dict[connection_id, {"websocket": ws, "session_id": str}]
    connections = websocket_events_manager.active_connections
    
    # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ session_id
    session_ids = []
    for conn_id, conn_data in connections.items():
        session_id = conn_data.get("session_id")
        if session_id:
            session_ids.append(session_id)
    
    return {
        "connected_devices": session_ids,
        "count": len(session_ids)
    }


@app.get("/devices/{session_id}/status")
async def get_energetic_device_status(session_id: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    connections = websocket_events_manager.active_connections
    
    # –ò—â–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ session_id
    is_connected = False
    connection_info = None
    
    for conn_id, conn_data in connections.items():
        if conn_data.get("session_id") == session_id:
            is_connected = True
            connection_info = {
                "connection_id": conn_id,
                "session_id": session_id,
                "connected": True
            }
            break
    
    if not is_connected:
        raise HTTPException(
            status_code=404,
            detail=f"Energetic device with session_id {session_id} is not connected"
        )
    
    return connection_info


@app.websocket("/ws/devices")
async def websocket_energetic_device_endpoint(
    websocket: WebSocket, 
    session_id: str, 
    db: AsyncSession = Depends(get_db)
):
    """
    WebSocket endpoint –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (Cerbo/Modbus).
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ email/password —á–µ—Ä–µ–∑ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç websocket_events_manager –¥–ª—è broadcast —Å–æ–±—ã—Ç–∏–π.
    """
    connection_id = await websocket_events_manager.connect(websocket, session_id=session_id)
    logger.info(f"Energetic device connection attempt, session_id: {session_id}")
    
    try:
        # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å credentials
        auth_data = await websocket.receive_json()
        user_email = auth_data.get("email")
        password = auth_data.get("password")
        
        if not user_email or not password:
            await websocket_events_manager.disconnect(connection_id)
            logger.warning(f"Missing credentials for session {session_id}")
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Missing credentials"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è auth_service
        user = await get_user_by_email(email=user_email, db=db)
        if user is None or not verify_password(plain_password=password, hashed_password=user.password):
            await websocket_events_manager.disconnect(connection_id)
            logger.warning(f"Invalid credentials for session {session_id}, email: {user_email}")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid credentials"
            )
        
        logger.info(f"Energetic device authenticated: session_id={session_id}, user={user_email}")
        await websocket.send_json({"status": "authenticated"})
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
        while True:
            data = await websocket.receive_json()
            logger.debug(f"Received data from energetic device {session_id}: {data}")
            
            # Broadcast —Å–æ–±—ã—Ç–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
            await websocket_events_manager.broadcast_event({
                "device_id": session_id, 
                "data": data
            })
    
    except WebSocketDisconnect:
        logger.info(f"Energetic device {session_id} disconnected normally")
    except HTTPException as e:
        logger.error(f"Authentication failed for session {session_id}: {e.detail}")
    except Exception as e:
        logger.error(f"Error in energetic device connection {session_id}: {e}", exc_info=True)
    finally:
        await websocket_events_manager.disconnect(connection_id)
        logger.info(f"Energetic device {session_id} disconnected")


@app.post(
    "/send_message",
    status_code=status.HTTP_200_OK,
    summary="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ WebSocket"
)
async def send_message_to_energetic_device(message: WSMessageBase, db: AsyncSession = Depends(get_db)):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JSON-—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —á–µ—Ä–µ–∑ WebSocket.
    –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç—Å—è –ø–æ session_token.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ –≤ Redis
    connection_id = await redis_client.get(f"ws:session:{message.session_token}")
    if not connection_id:
        logger.warning(f"No connection found for session_token {message.session_token}")
        raise HTTPException(
            status_code=404, 
            detail=f"–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: {message.session_token}"
        )
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ websocket_events_manager
        await websocket_events_manager.send_to_session(
            session_id=message.session_token,
            event_data=message.data
        )
        logger.info(f"Message sent to energetic device session {message.session_token} via connection {connection_id}")
        return {
            "detail": "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
            "session_token": message.session_token,
            "connection_id": connection_id.decode() if isinstance(connection_id, bytes) else connection_id
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {message.session_token}: {e}", exc_info=True)
        raise HTTPException(
            status_code=500, 
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
        )


@app.post(
    "/broadcast_modbus_command",
    status_code=status.HTTP_200_OK,
    summary="–í—Ä—É—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Modbus-–∫–æ–º–∞–Ω–¥—É –≤—Å–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º"
)
async def broadcast_modbus_command_manual(hex_data: str = "09 03 00 00 00 0a c4 85"):
    """
    –í—Ä—É—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Modbus-–∫–æ–º–∞–Ω–¥—É (hex) –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º.
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç: 09 03 00 00 00 0a c4 85
    """
    connections = websocket_events_manager.active_connections
    
    if not connections:
        raise HTTPException(status_code=404, detail="No active energetic devices connected")
    
    command_data = {
        "command_type": "modbus_read",
        "data": hex_data
    }
    
    sent_count = 0
    failed_count = 0
    
    for connection_id, conn_data in connections.items():
        session_id = conn_data.get("session_id")
        if not session_id:
            continue
        
        try:
            await websocket_events_manager.send_to_session(
                session_id=session_id,
                event_data=command_data
            )
            sent_count += 1
            logger.info(f"üì§ Manual Modbus command sent to session_id: {session_id}")
        except Exception as e:
            failed_count += 1
            logger.warning(f"Failed to send manual command to session {session_id}: {e}")
    
    return {
        "detail": "Modbus command broadcast complete",
        "total_devices": len(connections),
        "sent_successfully": sent_count,
        "failed": failed_count,
        "hex_command": hex_data
    }
