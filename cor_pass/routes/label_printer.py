from fastapi import APIRouter, Form
from PIL import Image, ImageDraw, ImageFont
from brother_ql.raster import BrotherQLRaster
from brother_ql.conversion import convert
import socket
import uuid
import time

router = APIRouter()

PRINTER_IP = "192.168.154.154"
PRINTER_MODEL = "QL-810W"
LABEL_TYPE = "62"

def create_label_image(text, max_width=696, max_height=300):
    font = ImageFont.load_default()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫–∏ —á–µ—Ä–µ–∑ textbbox
    temp_img = Image.new("RGB", (1, 1))
    temp_draw = ImageDraw.Draw(temp_img)
    bbox = temp_draw.textbbox((0, 0), "Ay", font=font)
    line_height = bbox[3] - bbox[1]

    max_chars_per_line = 40
    lines = [text[i:i+max_chars_per_line] for i in range(0, len(text), max_chars_per_line)]
    height = min(max_height, line_height * len(lines) + 20)

    img = Image.new("RGB", (max_width, height), color="white")
    draw = ImageDraw.Draw(img)
    y = 10
    for line in lines:
        draw.text((10, y), line, fill="black", font=font)
        y += line_height

    print(f"–ü–µ—Ä–µ–¥ convert(): —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {img.size}")
    return img





def send_lpr_job(printer_ip, queue_name, data, timeout=5):
    try:
        print(f"‚åõ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {printer_ip}:515...")
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(timeout)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è —á—Ç–µ–Ω–∏—è
        s.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, 8192)
        
        s.connect((printer_ip, 515))
        print("‚úì –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        def send_cmd(cmd):
            print(f"‚Üí –û—Ç–ø—Ä–∞–≤–∫–∞: {cmd[:100]}...")
            s.sendall(cmd.encode('ascii') + b'\n')
            response = s.recv(1024)  # –ß–∏—Ç–∞–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö
            print(f"‚Üê –û—Ç–≤–µ—Ç: {response!r}")
            return response

        # 1. –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è ACK)
        print("\n=== 1. –ò–ù–ò–¶–ò–ê–¶–ò–Ø –û–ß–ï–†–ï–î–ò ===")
        cmd = f"\x02{queue_name}"
        response = send_cmd(cmd)
        
        # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ
        if response and response != b'\x00':
            print(f"‚ö† –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response!r}")

        # 2. Control file (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        print("\n=== 2. CONTROL FILE ===")
        control_file = f"H{socket.gethostname()[:31]}\nPguest\nJlabel\nldfA{queue_name}\n"
        print(f"Content:\n{control_file}")

        cmd = f"\x02{len(control_file)} cfA{queue_name}"
        response = send_cmd(cmd)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö control file
        s.sendall(control_file.encode('ascii') + b'\x00')
        response = s.recv(1024)
        print(f"–û—Ç–≤–µ—Ç –Ω–∞ control file: {response!r}")

        # 3. Data file
        print("\n=== 3. DATA FILE ===")
        cmd = f"\x03{len(data)} dfA{queue_name}"
        response = send_cmd(cmd)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ {len(data)} –±–∞–π—Ç...")
        chunks = [data[i:i+1024] for i in range(0, len(data), 1024)]
        for chunk in chunks:
            s.sendall(chunk)
        s.sendall(b'\x00')
        
        response = s.recv(1024)
        print(f"–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {response!r}")
        
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        raise
    finally:
        s.close()
        print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")




@router.post("/print_code_label")
def print_label(content: str = Form(...)):
    print("\n" + "="*50)
    print(f"üÜï –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—á–∞—Ç—å: '{content[:20]}...'")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞...")
        if not check_printer_available(PRINTER_IP):
            msg = "–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            print(f"‚ùå {msg}")
            return {"status": "error", "detail": msg}

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        print("üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        img = create_label_image(content)
        print(f"üñºÔ∏è –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img.size}")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ QL-—Ñ–æ—Ä–º–∞—Ç
        print("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç Brother QL...")
        qlr = BrotherQLRaster(PRINTER_MODEL)
        convert(
            qlr=qlr,
            images=[img],
            label=LABEL_TYPE,
            rotate="90",
            threshold=70.0,
            dither=False,
            compress=True,
            cut=True
        )
        print(f"üì¶ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—á–∞—Ç–∏: {len(qlr.data)} –±–∞–π—Ç")

        # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—á–∞—Ç–∏ —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏
        QUEUE_NAMES = ["lp", "LPT1", "PRINTER", "Brother", "label"]
        print(f"üñ®Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—á–∞—Ç–∏ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥–∏: {QUEUE_NAMES}")
        
        for queue in QUEUE_NAMES:
            print(f"\n=== –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—á–∞—Ç–∏ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å '{queue}' ===")
            try:
                if send_lpr_job(PRINTER_IP, queue, qlr.data):
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–µ—á–∞—Ç—å —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å '{queue}'")
                    return {"status": "success"}
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å –æ—á–µ—Ä–µ–¥—å—é '{queue}': {str(e)}")
                continue

        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–µ—á–∞—Ç—å —á–µ—Ä–µ–∑ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏")

    except Exception as e:
        print(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return {"status": "error", "detail": str(e)}


def resize_image(img, max_width=696, max_height=300):
    w, h = img.size
    scale_w = max_width / w
    scale_h = max_height / h
    scale = min(scale_w, scale_h, 1.0)  # –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º, —Ç–æ–ª—å–∫–æ —É–º–µ–Ω—å—à–∞–µ–º

    new_w = int(w * scale)
    new_h = int(h * scale)

    if (new_w, new_h) != (w, h):
        img = img.resize((new_w, new_h), Image.LANCZOS)
        print(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ —Å ({w},{h}) –¥–æ ({new_w},{new_h})")

    return img



def check_printer_available(ip, port=515, timeout=2):
    try:
        print(f"üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {ip}:{port}...")
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(timeout)
            s.connect((ip, port))
            print(f"‚úì –ü—Ä–∏–Ω—Ç–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
        return False