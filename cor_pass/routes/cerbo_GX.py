from fastapi import APIRouter, HTTPException,Request
import logging
import json
from pymodbus.client import AsyncModbusTcpClient
from pydantic import BaseModel, Field
from typing import Optional


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Modbus
MODBUS_IP = "91.203.25.12"
MODBUS_PORT = 502
BATTERY_ID = 225         # –û—Å–Ω–æ–≤–Ω–∞—è –±–∞—Ç–∞—Ä–µ—è
INVERTER_ID = 100     # –ò–Ω–≤–µ—Ä—Ç–æ—Ä
ESS_UNIT_ID = 227     # –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (ESS)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ Modbus
REGISTERS = {
    "soc": 266,            # % SoC (0.1%)
    "voltage": 259,        # –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ (x100)
    "current": 261,        # –¢–æ–∫ (x10)
    "power": 258,          # –ú–æ—â–Ω–æ—Å—Ç—å (signed int16)
    "soh": 304,            # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è (0.1%)
    "inverter_power": 870  # –ú–æ—â–Ω–æ—Å—Ç—å –∏–Ω–≤–µ—Ä—Ç–æ—Ä–∞ (signed int32)
}

ESS_REGISTERS = {
    "switch_position": 33,   # –ü–æ–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è (—Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã)
    "temperature_alarm": 34,  # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞
    "low_battery_alarm": 35,  # –¢—Ä–µ–≤–æ–≥–∞ –Ω–∏–∑–∫–æ–≥–æ –∑–∞—Ä—è–¥–∞
    "overload_alarm": 36,     # –¢—Ä–µ–≤–æ–≥–∞ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
    "ess_power_setpoint_l1": 37,  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—â–Ω–æ—Å—Ç–∏ ESS —Ñ–∞–∑–∞ 1
    "disable_charge": 38,    # –ó–∞–ø—Ä–µ—Ç –Ω–∞ –∑–∞—Ä—è–¥
    "disable_feed": 39,      # –ó–∞–ø—Ä–µ—Ç –Ω–∞ –ø–æ–¥–∞—á—É –≤ —Å–µ—Ç—å
    "ess_power_setpoint_l2": 40,  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—â–Ω–æ—Å—Ç–∏ ESS —Ñ–∞–∑–∞ 2
    "ess_power_setpoint_l3": 41   # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—â–Ω–æ—Å—Ç–∏ ESS —Ñ–∞–∑–∞ 3
}

# –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ESS
class EssModeControl(BaseModel):
    switch_position: int = Field(..., ge=1, le=4)

class EssFlagsControl(BaseModel):
    disable_charge: bool
    disable_feed: bool

class EssPowerControl(BaseModel):
    ess_power_setpoint_l1: Optional[int] = Field(None, ge=-32768, le=32767)
    ess_power_setpoint_l2: Optional[int] = Field(None, ge=-32768, le=32767)
    ess_power_setpoint_l3: Optional[int] = Field(None, ge=-32768, le=32767)
# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ FastAPI
router = APIRouter(prefix="/modbus", tags=["Modbus"])


# --- –ö–ª–∏–µ–Ω—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è ---
async def create_modbus_client(app):
    app.state.modbus_client = AsyncModbusTcpClient(host=MODBUS_IP, port=MODBUS_PORT)
    await app.state.modbus_client.connect()

async def close_modbus_client(app):
    await app.state.modbus_client.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
def decode_signed_16(value: int) -> int:
    return value - 0x10000 if value >= 0x8000 else value

def decode_signed_32(high: int, low: int) -> int:
    combined = (high << 16) | low
    return combined - 0x100000000 if combined >= 0x80000000 else combined

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–∞—Ç–∞—Ä–µ–∏
@router.get("/battery_status")
async def get_battery_status(request: Request):
    try:
        client = request.app.state.modbus_client

        addresses = [REGISTERS[key] for key in REGISTERS if key != "inverter_power"]
        start = min(addresses)
        count = max(addresses) - start + 1

        result = await client.read_input_registers(start, count=count, slave=BATTERY_ID)
        if result.isError():
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –±–∞—Ç–∞—Ä–µ–∏")

        raw = result.registers

        def get_value(name: str) -> int:
            return raw[REGISTERS[name] - start]

        return {
            "soc": get_value("soc") / 10,
            "voltage": get_value("voltage") / 100,
            "current": decode_signed_16(get_value("current")) / 10,
            "power": decode_signed_16(get_value("power")),
            "soh": get_value("soh") / 10
        }

    except Exception as e:
        logging.error("‚ùó –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –±–∞—Ç–∞—Ä–µ–∏", exc_info=e)
        raise HTTPException(status_code=500, detail="Modbus –æ—à–∏–±–∫–∞")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏ –∏–Ω–≤–µ—Ä—Ç–æ—Ä–∞
@router.get("/inverter_power")
async def get_inverter_power(request: Request):
    try:
        client = request.app.state.modbus_client

        address = REGISTERS["inverter_power"]
        result = await client.read_holding_registers(address, count=2, slave=INVERTER_ID)

        if result.isError():
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞ –º–æ—â–Ω–æ—Å—Ç–∏ –∏–Ω–≤–µ—Ä—Ç–æ—Ä–∞")

        high, low = result.registers
        return {"inverter_power": decode_signed_32(high, low)}

    except Exception as e:
        logging.error("‚ùó –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–æ—â–Ω–æ—Å—Ç–∏ –∏–Ω–≤–µ—Ä—Ç–æ—Ä–∞", exc_info=e)
        raise HTTPException(status_code=500, detail="Modbus –æ—à–∏–±–∫–∞")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ESS
@router.get("/ess_status")
async def get_ess_status(request: Request):
    try:
        client = request.app.state.modbus_client

        # –ß–∏—Ç–∞–µ–º –≤—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã —Å 33 –ø–æ 41 –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
        start_address = min(ESS_REGISTERS.values())
        count = max(ESS_REGISTERS.values()) - start_address + 1
        
        result = await client.read_holding_registers(start_address, count=count, slave=ESS_UNIT_ID)
        if result.isError():
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ ESS")

        registers = result.registers
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞ –ø–æ –∏–º–µ–Ω–∏
        def get_ess_value(name: str) -> int:
            return registers[ESS_REGISTERS[name] - start_address]

        response = {
            "switch_position": get_ess_value("switch_position"),
            "disable_charge": get_ess_value("disable_charge"),
            "disable_feed": get_ess_value("disable_feed"),
            "temperature_alarm": get_ess_value("temperature_alarm"),
            "low_battery_alarm": get_ess_value("low_battery_alarm"),
            "overload_alarm": get_ess_value("overload_alarm"),
            "ess_power_setpoint_l1": decode_signed_16(get_ess_value("ess_power_setpoint_l1")),
            "ess_power_setpoint_l2": decode_signed_16(get_ess_value("ess_power_setpoint_l2")),
            "ess_power_setpoint_l3": decode_signed_16(get_ess_value("ess_power_setpoint_l3"))
        }

        logging.info(f"ESS –°—Ç–∞—Ç—É—Å: {response}")

        return response

    except Exception as e:
        logging.error("‚ùó –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ESS —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤", exc_info=e)
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ Modbus")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ESS
@router.post("/ess_status/mode")
async def set_ess_mode(control: EssModeControl, request: Request):
    try:
        logging.info(f"üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ ESS: {control.switch_position}")
        client = request.app.state.modbus_client
        
        await client.write_register(
            address=ESS_REGISTERS["switch_position"],
            value=control.switch_position,
            slave=ESS_UNIT_ID
        )
        return {"status": "ok"}
    except Exception as e:
        logging.error("‚ùó –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ ESS", exc_info=e)
        raise HTTPException(status_code=500, detail="Modbus –æ—à–∏–±–∫–∞")

@router.post("/ess_status/flags")
async def set_ess_flags(control: EssFlagsControl, request: Request):
    try:
        logging.info(f"üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–æ–≤ ESS: charge={control.disable_charge}, feed={control.disable_feed}")
        client = request.app.state.modbus_client
        
        await client.write_register(
            address=ESS_REGISTERS["disable_charge"],
            value=1 if control.disable_charge else 0,
            slave=ESS_UNIT_ID
        )
        await client.write_register(
            address=ESS_REGISTERS["disable_feed"],
            value=1 if control.disable_feed else 0,
            slave=ESS_UNIT_ID
        )
        return {"status": "ok"}
    except Exception as e:
        logging.error("‚ùó –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–æ–≤ ESS", exc_info=e)
        raise HTTPException(status_code=500, detail="Modbus –æ—à–∏–±–∫–∞")

@router.post("/ess_status/power")
async def set_ess_power(control: EssPowerControl, request: Request):
    try:
        logging.info(f"üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—â–Ω–æ—Å—Ç–∏ ESS: L1={control.ess_power_setpoint_l1}, L2={control.ess_power_setpoint_l2}, L3={control.ess_power_setpoint_l3}")
        client = request.app.state.modbus_client
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏—è
        async def write_power_register(address, value):
            if value is not None:
                reg_value = value if value >= 0 else 65536 + value
                await client.write_register(
                    address=address,
                    value=reg_value,
                    slave=ESS_UNIT_ID
                )
        
        await write_power_register(ESS_REGISTERS["ess_power_setpoint_l1"], control.ess_power_setpoint_l1)
        await write_power_register(ESS_REGISTERS["ess_power_setpoint_l2"], control.ess_power_setpoint_l2)
        await write_power_register(ESS_REGISTERS["ess_power_setpoint_l3"], control.ess_power_setpoint_l3)
        
        return {"status": "ok"}
    except Exception as e:
        logging.error("‚ùó –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ—â–Ω–æ—Å—Ç–∏ ESS", exc_info=e)
        raise HTTPException(status_code=500, detail="Modbus –æ—à–∏–±–∫–∞")