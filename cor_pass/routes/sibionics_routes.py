"""
API Routes –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SIBIONICS CGM
"""
from typing import List, Optional
from fastapi import APIRouter, Depends, HTTPException, status, Query
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime, timezone
from loguru import logger

from cor_pass.database.db import get_db
from cor_pass.database.models import User
from cor_pass.services.auth import auth_service
from cor_pass.schemas import (
    SibionicsUserAuthCreate,
    SibionicsUserAuthResponse,
    SibionicsDeviceResponse,
    SibionicsGlucoseResponse,
    SibionicsSyncRequest,
    SibionicsSyncResponse
)
from cor_pass.services.sibionics_service import sibionics_client
from cor_pass.repository import sibionics_repository


router = APIRouter(prefix="/sibionics", tags=["SIBIONICS CGM"])


@router.post(
    "/auth",
    response_model=SibionicsUserAuthResponse,
    status_code=status.HTTP_201_CREATED,
    summary="–°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç SIBIONICS —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
)
async def create_user_authorization(
    auth_data: SibionicsUserAuthCreate,
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(auth_service.get_current_user)
):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º COR-ID –∏ –∞–∫–∫–∞—É–Ω—Ç–æ–º SIBIONICS.
    
    –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è —á–µ—Ä–µ–∑ H5 —Å—Ç—Ä–∞–Ω–∏—Ü—É SIBIONICS,
    –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–∞–µ—Ç `biz_id` —á–µ—Ä–µ–∑ callback.
    –≠—Ç–æ—Ç endpoint —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≤—è–∑—å user_id ‚Üî biz_id –≤ –ë–î.
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        auth = await sibionics_repository.create_or_update_user_auth(
            db=db,
            user_id=current_user.id,
            auth_data=auth_data
        )
        
        logger.info(f"‚úÖ User {current_user.email} linked to SIBIONICS biz_id: {auth_data.biz_id}")
        
        return SibionicsUserAuthResponse.model_validate(auth)
        
    except Exception as e:
        logger.error(f"‚ùå Error creating SIBIONICS authorization: {e}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to create authorization: {str(e)}"
        )


@router.get(
    "/auth",
    response_model=SibionicsUserAuthResponse,
    summary="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ SIBIONICS"
)
async def get_user_authorization(
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(auth_service.get_current_user)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ SIBIONICS
    """
    auth = await sibionics_repository.get_user_auth_by_user_id(
        db=db,
        user_id=current_user.id
    )
    
    if not auth:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="SIBIONICS authorization not found for this user"
        )
    
    return SibionicsUserAuthResponse.model_validate(auth)


@router.delete(
    "/auth",
    status_code=status.HTTP_204_NO_CONTENT,
    summary="–û—Ç–æ–∑–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é SIBIONICS"
)
async def revoke_user_authorization(
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(auth_service.get_current_user)
):
    """
    –û—Ç–∑—ã–≤–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ SIBIONICS.
    –£–¥–∞–ª—è–µ—Ç —Å–≤—è–∑—å —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º SIBIONICS –∏ –æ—Ç–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ SIBIONICS.
    """
    # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    auth = await sibionics_repository.get_user_auth_by_user_id(
        db=db,
        user_id=current_user.id
    )
    
    if not auth:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="SIBIONICS authorization not found"
        )
    
    try:
        # –û—Ç–∑—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ SIBIONICS
        await sibionics_client.revoke_authorization(biz_id=auth.biz_id)
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –ë–î
        await sibionics_repository.deactivate_user_auth(db=db, auth_id=auth.id)
        
        logger.info(f"‚úÖ Revoked SIBIONICS authorization for user {current_user.email}")
        
    except Exception as e:
        logger.error(f"‚ùå Error revoking SIBIONICS authorization: {e}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to revoke authorization: {str(e)}"
        )


@router.get(
    "/devices",
    response_model=List[SibionicsDeviceResponse],
    summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ CGM"
)
async def get_devices(
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(auth_service.get_current_user)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ CGM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î.
    –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å SIBIONICS –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ endpoint /sync
    """
    # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    auth = await sibionics_repository.get_user_auth_by_user_id(
        db=db,
        user_id=current_user.id
    )
    
    if not auth:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="SIBIONICS authorization not found. Please authorize first."
        )
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –ë–î
    devices = await sibionics_repository.get_devices_by_auth_id(
        db=db,
        auth_id=auth.id
    )
    
    return [SibionicsDeviceResponse.model_validate(device) for device in devices]


@router.get(
    "/devices/{device_id}/glucose",
    response_model=List[SibionicsGlucoseResponse],
    summary="–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≥–ª—é–∫–æ–∑—ã –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
)
async def get_device_glucose_data(
    device_id: str,
    start_time: Optional[datetime] = Query(None, description="Start time (ISO 8601)"),
    end_time: Optional[datetime] = Query(None, description="End time (ISO 8601)"),
    limit: int = Query(1000, ge=1, le=10000, description="Maximum number of records"),
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(auth_service.get_current_user)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≥–ª—é–∫–æ–∑—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –ë–î.
    
    device_id - —ç—Ç–æ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –Ω–∞—à–µ–π –ë–î (–Ω–µ SIBIONICS device_id).
    """
    # –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    device = await sibionics_repository.get_device_by_id(db=db, device_db_id=device_id)
    
    if not device:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Device not found"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    auth = await sibionics_repository.get_user_auth_by_user_id(
        db=db,
        user_id=current_user.id
    )
    
    if not auth or device.auth_id != auth.id:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Access denied to this device"
        )
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–ª—é–∫–æ–∑—ã
    glucose_data = await sibionics_repository.get_glucose_data(
        db=db,
        device_db_id=device_id,
        start_time=start_time,
        end_time=end_time,
        limit=limit
    )
    
    return [SibionicsGlucoseResponse.model_validate(record) for record in glucose_data]


@router.post(
    "/sync",
    response_model=SibionicsSyncResponse,
    summary="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å SIBIONICS"
)
async def sync_devices_and_data(
    sync_request: SibionicsSyncRequest = SibionicsSyncRequest(),
    db: AsyncSession = Depends(get_db),
    current_user: User = Depends(auth_service.get_current_user)
):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ –≥–ª—é–∫–æ–∑—ã —Å SIBIONICS Platform.
    
    1. –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å SIBIONICS
    2. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –≤ –ë–î
    3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–ª—é–∫–æ–∑—ã
    4. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≥–ª—é–∫–æ–∑—ã –≤ –ë–î
    """
    # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    auth = await sibionics_repository.get_user_auth_by_user_id(
        db=db,
        user_id=current_user.id
    )
    
    if not auth:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="SIBIONICS authorization not found. Please authorize first."
        )
    
    try:
        devices_synced = 0
        total_records_added = 0
        total_records_updated = 0
        sync_details = []
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å SIBIONICS
        logger.info(f"üîÑ Starting device sync for user {current_user.email}")
        device_list_response = await sibionics_client.get_device_list(
            biz_id=auth.biz_id,
            page_num=1,
            page_size=100
        )
        
        devices_from_api = device_list_response.get("records", [])
        
        if not devices_from_api:
            logger.warning(f"No devices found for user {current_user.email}")
            return SibionicsSyncResponse(
                devices_synced=0,
                total_records_added=0,
                total_records_updated=0,
                sync_timestamp=datetime.now(timezone.utc),
                details=[]
            )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        for device_data_dict in devices_from_api:
            try:
                from cor_pass.schemas import SibionicsDeviceData
                device_data = SibionicsDeviceData(**device_data_dict)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –ë–î
                device = await sibionics_repository.create_or_update_device(
                    db=db,
                    auth_id=auth.id,
                    device_data=device_data
                )
                
                devices_synced += 1
                device_records_added = 0
                device_records_updated = 0
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
                last_index = await sibionics_repository.get_latest_glucose_index(
                    db=db,
                    device_db_id=device.id
                )
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                start_index = last_index + 1 if last_index else sync_request.start_index
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–ª—é–∫–æ–∑—ã —Å SIBIONICS
                glucose_response = await sibionics_client.get_device_glucose_data(
                    biz_id=auth.biz_id,
                    device_id=device_data.device_id,
                    index=start_index,
                    page_num=1,
                    page_size=sync_request.page_size
                )
                
                glucose_records = glucose_response.get("records", [])
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≥–ª—é–∫–æ–∑—ã
                for glucose_dict in glucose_records:
                    from cor_pass.schemas import SibionicsGlucoseData
                    glucose_data = SibionicsGlucoseData(**glucose_dict)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å
                    existing_count = await db.execute(
                        f"SELECT COUNT(*) FROM sibionics_glucose WHERE device_id = '{device.id}' AND index = {glucose_data.i}"
                    )
                    
                    glucose_record = await sibionics_repository.create_glucose_record(
                        db=db,
                        device_db_id=device.id,
                        glucose_data=glucose_data
                    )
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª–∞ –ª–∏ –∑–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞
                    # (—É–ø—Ä–æ—â–µ–Ω–Ω–æ —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–º–∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏)
                    device_records_added += 1
                
                total_records_added += device_records_added
                total_records_updated += device_records_updated
                
                sync_details.append({
                    "device_id": device.device_id,
                    "device_name": device.device_name,
                    "records_added": device_records_added,
                    "records_updated": device_records_updated
                })
                
                logger.info(f"‚úÖ Synced device {device.device_name}: {device_records_added} new records")
                
            except Exception as device_error:
                logger.error(f"‚ùå Error syncing device: {device_error}", exc_info=True)
                sync_details.append({
                    "device_id": device_data_dict.get("deviceId", "unknown"),
                    "error": str(device_error)
                })
                continue
        
        logger.info(f"‚úÖ Sync completed: {devices_synced} devices, {total_records_added} new records")
        
        return SibionicsSyncResponse(
            devices_synced=devices_synced,
            total_records_added=total_records_added,
            total_records_updated=total_records_updated,
            sync_timestamp=datetime.now(timezone.utc),
            details=sync_details
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error during SIBIONICS sync: {e}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Sync failed: {str(e)}"
        )
