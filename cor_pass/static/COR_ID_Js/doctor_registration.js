


// filename: doctor_registration.js
// Final cleaned & fixed version for doctor registration
// - Single initialization of event listeners
// - Files stored in registrationFiles and restored between modal steps
// - Safe null checks (no Uncaught TypeError: Cannot set properties of null)
// - submitForm uses registrationFiles
// - exportFormToPDF uses addFileToVFS/addFont (no dependency on external JsPdf_Custom_Fonts)
// - initImageDragAndZoom uses explicit options for wheel listener

/* ========== –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–∞–π–ª–æ–≤ ========== */
const registrationFiles = {
    photo: null,
    military_document: null,
    diplomaFile: null,
    certificateFile: null
  };
  
  /* ========== DOMContentLoaded: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–¥–∏–Ω —Ä–∞–∑ ========== */
  document.addEventListener('DOMContentLoaded', () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    navigateToStep(1);
    autoFillStep1Fields();
  
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    document.querySelectorAll('[data-translate="back-link-text"]').forEach(btn => {
      btn.addEventListener('click', goBack);
    });
    document.querySelectorAll('[data-translate="forward-link-text"]').forEach(btn => {
      btn.addEventListener('click', goForward);
    });
  
    // Drag modal initial
    makeModalDraggable('step1Modal');
  
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è input[type=file] –æ–¥–∏–Ω —Ä–∞–∑
    initFileInput('fileInput', null, 'photo', true, 'previewImage', 'placeholder');
    initFileInput('military_document', 'militaryFileName', 'military_document');
    initFileInput('diplomaFile', 'fileName', 'diplomaFile');
    initFileInput('certificateFile', 'certificateFileName', 'certificateFile');
  
    // –õ–æ–≥ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)
    ['fileInput', 'military_document', 'diplomaFile', 'certificateFile'].forEach(id => {
      const input = document.getElementById(id);
      if (input) {
        input.addEventListener('change', e => {
          const file = e.target.files ? e.target.files[0] : null;
          console.log(file ? `üìé –§–∞–π–ª –≤—ã–±—Ä–∞–Ω [${id}]: ${file.name}` : `üìé –§–∞–π–ª —Å–Ω—è—Ç [${id}]`);
        });
      }
    });
  
    // –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const submitButton = document.getElementById('submitButton');
    if (submitButton) submitButton.addEventListener('click', submitForm);
  
    // –ö–Ω–æ–ø–∫–∞ Preview PDF
    const previewBtn = document.getElementById('exportPdfButton');
    if (previewBtn) previewBtn.addEventListener('click', exportFormToPDF);
  });
  
  /* ========== –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è file inputs ==========
     inputId    - id input[type=file]
     labelId    - id element –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å null)
     fileKey    - –∫–ª—é—á –≤ registrationFiles
     isImage    - –µ—Å–ª–∏ true ‚Äî —á–∏—Ç–∞–µ–º previewId
     previewId  - id img –¥–ª—è –ø—Ä–µ–≤—å—é
     placeholderId - id placeholder svg
  =========================================================== */
  function initFileInput(inputId, labelId, fileKey, isImage = false, previewId = null, placeholderId = null) {
    const input = document.getElementById(inputId);
    const label = labelId ? document.getElementById(labelId) : null;
    const preview = previewId ? document.getElementById(previewId) : null;
    const placeholder = placeholderId ? document.getElementById(placeholderId) : null;
  
    if (!input) return;
  
    // –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –≤ registrationFiles (–Ω–∞–ø—Ä–∏–º–µ—Ä –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å–∫—Ä–∏–ø—Ç–∞),
    // –ø–æ–∫–∞–∂–µ–º –∏–º—è/–ø—Ä–µ–≤—å—é:
    if (registrationFiles[fileKey]) {
      if (label) {
        label.textContent = registrationFiles[fileKey].name;
        label.style.color = '#7f69bd';
      }
      if (isImage && preview && placeholder) {
        const reader = new FileReader();
        reader.onload = (ev) => {
          preview.src = ev.target.result;
          preview.style.display = 'block';
          placeholder.style.display = 'none';
          initImageDragAndZoom(preview);
        };
        reader.readAsDataURL(registrationFiles[fileKey]);
      }
    }
  
    input.addEventListener('change', (e) => {
      const file = e.target.files ? e.target.files[0] : null;
      registrationFiles[fileKey] = file || null;
  
      if (label) {
        if (file) {
          label.textContent = file.name;
          label.style.color = '#7f69bd';
        } else {
          label.textContent = '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω';
          label.style.color = '#888';
        }
      }
  
      if (isImage && preview && placeholder) {
        if (file) {
          const reader = new FileReader();
          reader.onload = (ev) => {
            preview.src = ev.target.result;
            preview.style.display = 'block';
            placeholder.style.display = 'none';
            initImageDragAndZoom(preview);
          };
          reader.readAsDataURL(file);
        } else {
          preview.style.display = 'none';
          if (placeholder) placeholder.style.display = 'block';
        }
      }
    });
  }
  
  /* ========== –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ (–º–æ–¥–∞–ª–∫–∞–º–∏) ========== */
  function navigateToStep(targetStep) {
    if (!checkToken()) return;
  
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª–∫–∏
    document.querySelectorAll('.modal').forEach(modal => modal.style.display = 'none');
  
    const targetModal = document.getElementById(`step${targetStep}Modal`);
    if (!targetModal) {
      console.error(`–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ step${targetStep}Modal –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      return;
    }
  
    targetModal.style.display = 'block';
    makeModalDraggable(`step${targetStep}Modal`);
    updateProgressBar(targetStep);
  
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏/–ø—Ä–µ–≤—å—é (—Å guard-–∞–º–∏)
    if (targetStep === 1 && registrationFiles.photo) {
      const img = document.getElementById('previewImage');
      const placeholder = document.getElementById('placeholder');
      if (img && placeholder) {
        const reader = new FileReader();
        reader.onload = e => {
          img.src = e.target.result;
          img.style.display = 'block';
          placeholder.style.display = 'none';
          initImageDragAndZoom(img);
        };
        reader.readAsDataURL(registrationFiles.photo);
      }
    }
  
    if (targetStep === 2 && registrationFiles.military_document) {
      const lbl = document.getElementById('militaryFileName');
      if (lbl) {
        lbl.textContent = registrationFiles.military_document.name;
        lbl.style.color = '#7f69bd';
      }
    }
  
    if (targetStep === 3) {
        console.log("üîÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —à–∞–≥–∞ 3");
        const fields = ['Clinick_Name', 'Department', 'Job_title', 'specialization', 'degree', 'birthdate'];
        fields.forEach(id => {
          const el = document.getElementById(id);
          if (el && el.value) {
            el.style.borderColor = '#f0f0f0';
          }
        });
      }

    if (targetStep === 4 && registrationFiles.diplomaFile) {
      const lbl = document.getElementById('fileName');
      if (lbl) {
        lbl.textContent = registrationFiles.diplomaFile.name;
        lbl.style.color = '#7f69bd';
      }
    }
  
    if (targetStep === 5 && registrationFiles.certificateFile) {
      const lbl = document.getElementById('certificateFileName');
      if (lbl) {
        lbl.textContent = registrationFiles.certificateFile.name;
        lbl.style.color = '#7f69bd';
      }
    }
  }
  
  /* ========== –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ ========= */
  function getCurrentStep() {
    const visibleModal = Array.from(document.querySelectorAll('.modal')).find(m => {
      // —Å–º–æ—Ç—Ä–∏–º computed style –Ω–∞ display block
      return window.getComputedStyle(m).display === 'block';
    });
    if (visibleModal) {
      const match = visibleModal.id.match(/step(\d)Modal/);
      return match ? parseInt(match[1], 10) : 1;
    }
    return 1;
  }
  
  /* ========== –ù–∞–≤–∏–≥–∞—Ü–∏—è - –∫–Ω–æ–ø–∫–∏ ========= */
  function goBack() {
    const currentStep = getCurrentStep();
    if (currentStep > 1) {
      navigateToStep(currentStep - 1);
    } else {
      window.history.back();
    }
  }
  
  function goForward() {
    const currentStep = getCurrentStep();
    if (currentStep < 5) {
      if (validateCurrentStep(currentStep)) {
        navigateToStep(currentStep + 1);
      }
    } else {
      submitForm();
    }
  }
  
  /* ========== –í–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ —à–∞–≥–∞–º (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å) ========== */
  function validateCurrentStep(step) {
    switch (step) {
      case 1: return validateStep1();
      case 2: return validateStep2();
      case 3: return validateStep3();
      case 4: return validateStep4();
      case 5: return validateStep5();
      default: return true;
    }
  }
  
  function validateStep1() {
    const required = ['lastName', 'firstName', 'workEmail'];
    let ok = true;
    required.forEach(id => {
      const el = document.getElementById(id);
      if (!el || !el.value.trim()) {
        ok = false;
        if (el) el.style.borderColor = 'red';
      } else {
        if (el) el.style.borderColor = '#f0f0f0';
      }
    });
    if (!ok) alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
    return ok;
  }
  
  function validateStep2() {
  console.log("=== –í–ê–õ–ò–î–ê–¶–ò–Ø STEP2 –ó–ê–ü–£–©–ï–ù–ê ===");
  let ok = true;

  const required = ['Passport_serial_number', 'Tax_Number', 'Addres'];
  required.forEach(id => {
    const el = document.getElementById(id);
    if (!el || !el.value.trim()) {
      ok = false;
      if (el) el.style.borderColor = 'red';
    } else {
      el.style.borderColor = '#f0f0f0';
    }
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  const militaryFileInput = document.getElementById('military_document');
  const label = document.getElementById('fileName');
  const hasFile = registrationFiles && registrationFiles.military_document;

  if (!hasFile) {
    ok = false;
    if (label) {
      label.textContent = '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω!';
      label.style.color = 'red';
    }
  } else {
    if (label) label.style.color = '#7f69bd';
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–µ—Ä–∏–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞ ‚Äî —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –±—É–∫–≤—ã –ª–∞—Ç–∏–Ω–∏—Ü—ã/–∫–∏—Ä–∏–ª–ª–∏—Ü—ã
  const passportEl = document.getElementById('Passport_serial_number');
  if (passportEl && passportEl.value.trim() && !/^[A-Za-z–ê-–Ø–∞-—è0-9\s-]+$/.test(passportEl.value.trim())) {
    ok = false;
    passportEl.style.borderColor = 'red';
    alert('–°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ù–ù ‚Äî —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –¥–ª–∏–Ω–∞ 10‚Äì12 —Å–∏–º–≤–æ–ª–æ–≤
  const taxEl = document.getElementById('Tax_Number');
  if (taxEl && taxEl.value.trim() && !/^\d{10,12}$/.test(taxEl.value.trim())) {
    ok = false;
    taxEl.style.borderColor = 'red';
    alert('–ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10‚Äì12 —Ü–∏—Ñ—Ä');
  }

  if (!ok) alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  return ok;
}


  
  function validateStep3() {
    const fields = ['Clinick_Name', 'Department', 'Job_title', 'specialization', 'degree', 'birthdate'];
    let ok = true;
  
    fields.forEach(id => {
      const el = document.getElementById(id);
      if (!el) {
        ok = false;
        return;
      }
      if (el.tagName === 'SELECT') {
        if (!el.value) { ok = false; el.style.borderColor = 'red'; } else el.style.borderColor = '#f0f0f0';
      } else if (!el.value.trim()) {
        ok = false; el.style.borderColor = 'red';
      } else el.style.borderColor = '#f0f0f0';
    });
  
    const birthdate = document.getElementById('birthdate');
    if (birthdate && birthdate.value) {
      const sel = new Date(birthdate.value), now = new Date();
      if (sel > now) { ok = false; birthdate.style.borderColor = 'red'; alert('–î–∞—Ç–∞ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º'); }
    }
  
    if (!ok) alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    return ok;
  }
  
  function validateStep4() {
    console.log("=== –í–ê–õ–ò–î–ê–¶–ò–Ø STEP4 –ó–ê–ü–£–©–ï–ù–ê ===");
    let isValid = true;
  
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
    const textFields = ['date_id', 'Serial_number', 'Number', 'University'];
    textFields.forEach(id => {
      const el = document.getElementById(id);
      if (!el || !el.value.trim()) { isValid = false; if (el) el.style.borderColor = 'red'; }
      else el.style.borderColor = '#f0f0f0';
    });
  
    // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ñ–∞–π–ª –¥–∏–ø–ª–æ–º–∞ –µ—Å—Ç—å –≤ registrationFiles (–∞ –Ω–µ –≤ DOM)
    if (!registrationFiles.diplomaFile) {
      isValid = false;
      const label = document.getElementById('fileName');
      if (label) { label.textContent = '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω!'; label.style.color = 'red'; }
    }
  
    // –°–µ—Ä–∏—è/–Ω–æ–º–µ—Ä —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    const serial = document.getElementById('Serial_number');
    const number = document.getElementById('Number');
    if (serial && serial.value.trim() && !/^\d+$/.test(serial.value.trim())) { isValid = false; serial.style.borderColor = 'red'; alert('–°–µ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã'); }
    if (number && number.value.trim() && !/^\d+$/.test(number.value.trim())) { isValid = false; number.style.borderColor = 'red'; alert('–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã'); }
  
    if (!isValid) alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    return isValid;
  }
  
  function validateStep5() {
    let ok = true;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: –¥–∞—Ç–∞, —Å–µ—Ä–∏—è, –Ω–æ–º–µ—Ä, –≤—É–∑ –∏ —Ñ–∞–π–ª –≤ registrationFiles
    const required = ['date_id', 'Serial_number', 'Number', 'University'];
    required.forEach(id => {
      const el = document.getElementById(id);
      if (!el || !el.value.trim()) { ok = false; if (el) el.style.borderColor = 'red'; } else el.style.borderColor = '#f0f0f0';
    });
  
    if (!registrationFiles.certificateFile) {
      ok = false;
      const label = document.getElementById('certificateFileName');
      if (label) label.style.color = 'red';
    }
  
    if (!ok) alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    return ok;
  }
  
  /* ========== –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç registrationFiles) ========== */
  async function submitForm() {
    try {
      const { photo, military_document, diplomaFile, certificateFile } = registrationFiles;
  
      const doctorData = {
        work_email: (document.getElementById('workEmail')?.value) || '',
        first_name: (document.getElementById('firstName')?.value) || '',
        surname: (document.getElementById('lastName')?.value) || '',
        last_name: (document.getElementById('middleName')?.value) || null,
        scientific_degree: (document.getElementById('degree')?.value) || '',
        date_of_last_attestation: (document.getElementById('birthdate')?.value) || '',
        diplomas: [{
          date: (document.getElementById('date_id')?.value) || '',
          series: (document.getElementById('Serial_number')?.value) || '',
          number: (document.getElementById('Number')?.value) || '',
          university: (document.getElementById('University')?.value) || ''
        }],
        certificates: [{
          date: (document.getElementById('date_id')?.value) || '',
          series: (document.getElementById('Serial_number')?.value) || '',
          number: (document.getElementById('Number')?.value) || '',
          university: (document.getElementById('University')?.value) || ''
        }],
        clinic_affiliations: [{
          clinic_name: (document.getElementById('Clinick_Name')?.value) || '',
          department: (document.getElementById('Department')?.value) || '',
          position: (document.getElementById('Job_title')?.value) || '',
          specialty: (document.getElementById('specialization')?.value) || ''
        }]
      };
  
      const formData = new FormData();
      formData.append('doctor_data', JSON.stringify(doctorData));
      if (photo) formData.append('doctors_photo', photo);
      if (military_document) formData.append('military_document', military_document);
      if (diplomaFile) formData.append('diploma_scan', diplomaFile);
      if (certificateFile) formData.append('certificate_scan', certificateFile);
  
      const token = new URLSearchParams(window.location.search).get('access_token');
  
      const res = await fetch('/api/doctor/signup', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`
        },
        body: formData
      });
  
      if (!res.ok) {
        const err = await res.json().catch(() => ({}));
        throw new Error(err.detail || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã');
      }
  
      const result = await res.json().catch(() => ({}));
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:', result);
      alert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.');
      window.location.href = '/registration_success.html';
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã:', err);
      alert(`–û—à–∏–±–∫–∞: ${err.message}`);
    }
  }
  
  /* ========== –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF (jsPDF) ==========
     –≠—Ç–æ—Ç –∫–æ–¥ –ù–ï –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ JsPdf_Custom_Fonts.js.
     –ï—Å–ª–∏ —É —Ç–µ–±—è —Ä–∞–Ω—å—à–µ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ TTFFont undefined ‚Äî —É–¥–∞–ª—è–π/ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
     JsPdf_Custom_Fonts.js –≤ HTML (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è).
  ================================================= */
  async function exportFormToPDF() {
    try {
      if (!window.jspdf || !window.jspdf.jsPDF) {
        alert('jsPDF –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ jsPDF –ø–æ–¥–∫–ª—é—á—ë–Ω.');
        return;
      }
      const { jsPDF } = window.jspdf;
      const doc = new jsPDF({ orientation: 'portrait', unit: 'mm', format: 'a4' });
  
      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç Roboto (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
      try {
        const fontUrl = '/static/fonts/Roboto-Regular.ttf';
        const fontResp = await fetch(fontUrl);
        if (fontResp.ok) {
          const ab = await fontResp.arrayBuffer();
          const b64 = arrayBufferToBase64(ab);
          // –î–æ–±–∞–≤–ª—è–µ–º —à—Ä–∏—Ñ—Ç –≤ VFS –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
          if (typeof doc.addFileToVFS === 'function' && typeof doc.addFont === 'function') {
            doc.addFileToVFS('Roboto-Regular.ttf', b64);
            doc.addFont('Roboto-Regular.ttf', 'Roboto', 'normal');
            doc.setFont('Roboto');
          }
        } else {
          // fallback - –æ—Å—Ç–∞–≤–ª—è–µ–º helvetica
          doc.setFont('helvetica');
        }
      } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback', e);
        doc.setFont('helvetica');
      }
  
      const getField = id => document.getElementById(id)?.value || '';
  
      // –î–∞–Ω–Ω—ã–µ
      const personalData = {
        "–§–∞–º–∏–ª–∏—è": getField("lastName"),
        "–ò–º—è": getField("firstName"),
        "–û—Ç—á–µ—Å—Ç–≤–æ": getField("middleName"),
        "–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è": getField("birthYear"),
        "–ü–æ–ª": getField("gender"),
        "–¢–µ–ª–µ—Ñ–æ–Ω": getField("Phone_number"),
        "–†–∞–±–æ—á–∏–π email": getField("workEmail")
      };
  
      const workData = {
        "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–∏": getField("Clinick_Name"),
        "–û—Ç–¥–µ–ª–µ–Ω–∏–µ": getField("Department"),
        "–î–æ–ª–∂–Ω–æ—Å—Ç—å": getField("Job_title"),
        "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è": getField("specialization"),
        "–ù–∞—É—á–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å": getField("degree"),
        "–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏": getField("birthdate")
      };
  
      const diplomaData = {
        "–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏": getField("date_id"),
        "–°–µ—Ä–∏—è": getField("Serial_number"),
        "–ù–æ–º–µ—Ä": getField("Number"),
        "–í–£–ó": getField("University")
      };
  
      let y = 20;
      doc.setFontSize(16);
      doc.setTextColor('#5B4296');
      doc.text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –≤—Ä–∞—á–∞", 105, y, { align: 'center' });
      y += 10;
  
      // –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      doc.setFontSize(14);
      doc.setTextColor('#5B4296');
      doc.text("–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", 15, y);
      y += 8;
      doc.setFontSize(12);
      doc.setTextColor('#323238');
  
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏–∑ registrationFiles, –µ—Å–ª–∏ –µ—Å—Ç—å
      if (registrationFiles.photo) {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataURL
        const dataUrl = await fileToDataUrl(registrationFiles.photo);
        // –ü–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
        const img = new Image();
        img.src = dataUrl;
        await waitImageLoad(img);
        let iw = img.width, ih = img.height;
        const maxW = 40, maxH = 40;
        if (iw > maxW) { ih = (maxW / iw) * ih; iw = maxW; }
        if (ih > maxH) { iw = (maxH / ih) * iw; ih = maxH; }
        try {
          doc.addImage(img, 'JPEG', 150, y - 15, iw, ih);
        } catch (e) {
          // –ü–æ–ø—ã—Ç–∫–∞ –∫–∞–∫ PNG
          doc.addImage(img, 'PNG', 150, y - 15, iw, ih);
        }
      }
  
      for (const [label, value] of Object.entries(personalData)) {
        doc.setTextColor('#323238');
        doc.text(`${label}:`, 15, y);
        doc.setTextColor('#000000');
        y = addTextWithLineBreaks(doc, value, 40, y, 100, 6);
      }
  
      if (y > 250) { doc.addPage(); y = 20; } else y += 10;
  
      // –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      doc.setFontSize(14);
      doc.setTextColor('#5B4296');
      doc.text("–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", 15, y);
      y += 8;
      doc.setFontSize(12);
      for (const [label, value] of Object.entries(workData)) {
        doc.text(`${label}:`, 15, y);
        y = addTextWithLineBreaks(doc, value, 50, y, 140, 6);
      }
  
      if (y > 250) { doc.addPage(); y = 20; } else y += 10;
  
      // –î–∞–Ω–Ω—ã–µ –¥–∏–ø–ª–æ–º–∞
      doc.setFontSize(14);
      doc.setTextColor('#5B4296');
      doc.text("–î–∞–Ω–Ω—ã–µ –¥–∏–ø–ª–æ–º–∞", 15, y);
      y += 8;
      doc.setFontSize(12);
      for (const [label, value] of Object.entries(diplomaData)) {
        doc.text(`${label}:`, 15, y);
        y = addTextWithLineBreaks(doc, value, 40, y, 150, 6);
      }
  
      if (registrationFiles.diplomaFile) {
        doc.text("–§–∞–π–ª –¥–∏–ø–ª–æ–º–∞:", 15, y);
        y = addTextWithLineBreaks(doc, registrationFiles.diplomaFile.name, 40, y, 150, 6);
      }
  
      if (y > 250) { doc.addPage(); y = 20; } else y += 10;
  
      // –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
      doc.setFontSize(14);
      doc.setTextColor('#5B4296');
      doc.text("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞", 15, y);
      y += 8;
      if (registrationFiles.certificateFile) {
        doc.setFontSize(12);
        doc.text("–§–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:", 15, y);
        y = addTextWithLineBreaks(doc, registrationFiles.certificateFile.name, 50, y, 140, 6);
      }
  
      if (y > 200) { doc.addPage(); y = 20; } else y = 250;
      doc.setFontSize(12);
      doc.text("–î–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: " + new Date().toLocaleDateString(), 15, y);
      y += 10;
      doc.text("–ü–æ–¥–ø–∏—Å—å: ___________________", 15, y);
  
      doc.save("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è_–∫–∞—Ä—Ç–∞_–≤—Ä–∞—á–∞.pdf");
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF:', err);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF: ' + (err.message || err));
    }
  }
  
  /* ========== –ü–æ–º–æ—â–Ω–∏–∫–∏ –¥–ª—è PDF ========== */
  function arrayBufferToBase64(buffer) {
    let binary = '';
    const bytes = new Uint8Array(buffer);
    const chunk = 0x8000;
    for (let i = 0; i < bytes.length; i += chunk) {
      const slice = bytes.subarray(i, i + chunk);
      binary += String.fromCharCode.apply(null, slice);
    }
    return btoa(binary);
  }
  
  function addTextWithLineBreaks(doc, text, x, y, maxWidth, lineHeight = 5) {
    const lines = doc.splitTextToSize(text || '', maxWidth);
    doc.text(lines, x, y);
    return y + (lines.length * lineHeight);
  }
  
  function fileToDataUrl(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = e => resolve(e.target.result);
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  }
  
  function waitImageLoad(img) {
    return new Promise(res => {
      if (img.complete && img.naturalWidth !== 0) return res();
      img.onload = () => res();
      img.onerror = () => res();
    });
  }
  
  /* ========== –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (localStorage) ========== */
  function autoFillStep1Fields() {
    console.log("–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π —à–∞–≥–∞ 1...");
    const gender = localStorage.getItem('userGender');
    const birthYear = localStorage.getItem('userBirthYear');
  
    const genderInput = document.getElementById('gender');
    if (genderInput && gender) {
      genderInput.value = (gender === 'M') ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π';
    }
  
    const birthYearInput = document.getElementById('birthYear');
    if (birthYearInput && birthYear) birthYearInput.value = birthYear;
  }
  
  /* ========== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –ø–æ —à–∞–≥–∞–º ========== */
  function logStepData(step) {
    let data = {};
    switch (step) {
      case 1:
        data = {
          lastName: document.getElementById('lastName')?.value,
          firstName: document.getElementById('firstName')?.value,
          middleName: document.getElementById('middleName')?.value,
          workEmail: document.getElementById('workEmail')?.value
        };
        break;
      case 2:
        data = { militaryFile: registrationFiles.military_document?.name || '‚Äî' };
        break;
      case 3:
        data = {
          Clinick_Name: document.getElementById('Clinick_Name')?.value,
          Department: document.getElementById('Department')?.value,
          Job_title: document.getElementById('Job_title')?.value,
          specialization: document.getElementById('specialization')?.value,
          degree: document.getElementById('degree')?.value,
          birthdate: document.getElementById('birthdate')?.value
        };
        break;
      case 4:
        data = {
          diplomaFile: registrationFiles.diplomaFile?.name || '‚Äî',
          date_id: document.getElementById('date_id')?.value,
          Serial_number: document.getElementById('Serial_number')?.value,
          Number: document.getElementById('Number')?.value,
          University: document.getElementById('University')?.value
        };
        break;
      case 5:
        data = {
          certificateFile: registrationFiles.certificateFile?.name || '‚Äî',
          date_id: document.getElementById('date_id')?.value,
          Serial_number: document.getElementById('Serial_number')?.value,
          Number: document.getElementById('Number')?.value,
          University: document.getElementById('University')?.value
        };
        break;
    }
    console.log(`üìã –î–∞–Ω–Ω—ã–µ —à–∞–≥–∞ ${step}:`, data);
  }
  
  /* ========== –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º navigateToStep –¥–ª—è –ª–æ–≥–æ–≤ ========== */
  (function wrapNavigateForLogging() {
    const originalNavigate = navigateToStep;
    navigateToStep = function (targetStep) {
      const currentStep = getCurrentStep();
      console.log(`‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥: —à–∞–≥ ${currentStep} ‚Üí ${targetStep}`);
      if (currentStep) logStepData(currentStep);
      originalNavigate(targetStep);
    };
  })();
  
  /* ========== Image drag & zoom (single init per image instance) ========== */
  function initImageDragAndZoom(img) {
    if (!img) return;
    // –Ω–µ –Ω–∞–≤–µ—à–∏–≤–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    if (img.__dragZoomInitialized) return;
    img.__dragZoomInitialized = true;
  
    let isDragging = false;
    let startX = 0, startY = 0, translateX = 0, translateY = 0, scale = 1;
  
    img.style.cursor = 'grab';
    img.addEventListener('mousedown', function (e) {
      isDragging = true;
      startX = e.clientX - translateX;
      startY = e.clientY - translateY;
      img.style.cursor = 'grabbing';
      e.stopPropagation();
    });
  
    window.addEventListener('mousemove', function (e) {
      if (isDragging) {
        translateX = e.clientX - startX;
        translateY = e.clientY - startY;
        img.style.transform = `translate(${translateX}px, ${translateY}px) scale(${scale})`;
      }
    });
  
    window.addEventListener('mouseup', function () {
      isDragging = false;
      img.style.cursor = 'grab';
    });
  
    // wheel: explicit passive: false because we call preventDefault
    img.addEventListener('wheel', function (e) {
      e.preventDefault();
      scale *= e.deltaY < 0 ? 1.1 : 0.9;
      img.style.transform = `translate(${translateX}px, ${translateY}px) scale(${scale})`;
      e.stopPropagation();
    }, { passive: false });
  }
  
  /* ========== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞ ========== */
  function updateProgressBar(currentStep) {
    const visibleModal = Array.from(document.querySelectorAll('.modal')).find(m => window.getComputedStyle(m).display === 'block');
    if (!visibleModal) return;
    const progressBar = visibleModal.querySelector('.progress-bar');
    if (!progressBar) return;
    const steps = progressBar.querySelectorAll('.progress-step');
    steps.forEach((step, index) => {
      if ((index + 1) <= currentStep) step.classList.add('active'); else step.classList.remove('active');
    });
  }
  
  
  